/*
 Copyright 2015 Matt Skellon
 1st Year SDAGE PPP Assignment 2
*/

/// \file Explosion.h
/// \brief Handles the processes associated with the explosion of a bomb, namely the displaying of the explosion texture
/// \author Matthew Skellon
/// \version 1.0
/// \date 4/5/15 Initial Doxygen file creation, updated to NCCA Coding Standard

#ifndef EXPLOSION_H_
#define EXPLOSION_H_

#include <string>
#include "Scene.h"

class Explosion
{
public :
    Explosion() : m_Life(50)
    {
      ObjLoad("models/Explosion.obj",
              "textures/Explosion.png",
              m_Vertex,
              m_Normal,
              m_Tex,
              m_v_Index,
              m_t_Index,
              m_n_Index,
              m_Texture);

      loadExp();
    }
    ~Explosion(){}

    //------------------------------------------------------------------------------------------------------------
    /// @brief Amount of time the explosion has been displayed
    //------------------------------------------------------------------------------------------------------------
    int     m_Life;
    //------------------------------------------------------------------------------------------------------------
    /// @brief The x-position of the explosion
    //------------------------------------------------------------------------------------------------------------
    float   m_xPos;
    //------------------------------------------------------------------------------------------------------------
    /// @brief The z-position of the explosion
    //------------------------------------------------------------------------------------------------------------
    float   m_zPos;
    //------------------------------------------------------------------------------------------------------------
    /// @brief Storage for some GL functions
    //------------------------------------------------------------------------------------------------------------
    GLuint  m_DisplayList;

    //------------------------------------------------------------------------------------------------------------
    /// @brief Loads in the explosion
    //------------------------------------------------------------------------------------------------------------
    void loadExp();

protected :
    //------------------------------------------------------------------------------------------------------------
    /// @brief Stores the vertex coordinates for loading
    //------------------------------------------------------------------------------------------------------------
    std::vector<Vec3> m_Vertex;
    //------------------------------------------------------------------------------------------------------------
    /// @brief Stores the normals for loading
    //------------------------------------------------------------------------------------------------------------
    std::vector<Vec3> m_Normal;
    //------------------------------------------------------------------------------------------------------------
    /// @brief Stores the texture coordinates for loading
    //------------------------------------------------------------------------------------------------------------
    std::vector<Vec3> m_Tex;
    //------------------------------------------------------------------------------------------------------------
    /// @brief Stores the face coordinates for loading
    //------------------------------------------------------------------------------------------------------------
    std::vector<Vec3> m_Face;
    //------------------------------------------------------------------------------------------------------------
    /// @brief Face vertices
    //------------------------------------------------------------------------------------------------------------
    std::vector<int>  m_v_Index;
    //------------------------------------------------------------------------------------------------------------
    /// @brief Face textures
    //------------------------------------------------------------------------------------------------------------
    std::vector<int>  m_t_Index;
    //------------------------------------------------------------------------------------------------------------
    /// @brief Face normals
    //------------------------------------------------------------------------------------------------------------
    std::vector<int>  m_n_Index;
    //------------------------------------------------------------------------------------------------------------
    /// @brief The texture
    //------------------------------------------------------------------------------------------------------------
    GLuint            m_Texture;
};


#endif
