/*
 Copyright 2015 Matt Skellon
 1st Year SDAGE PPP Assignment 2
*/

/// \file Bomb.h
/// \brief Handles the processes associated with a bomb's creation, lifetime and destruction
/// \author Matthew Skellon
/// \version 1.0
/// \date 4/5/15 Initial Doxygen file creation, updated to NCCA Coding Standard

#ifndef BOMB_H_
#define BOMB_H_

#include <string>
#include "Scene.h"
#include "Object.h"

class Bomb : public Object
{
public :
  ///
  /// \brief Bomb
  ///
    Bomb() : m_PlaceBomb(false),
             m_CanPlaceBomb(true),
             m_Life(0),
             m_xPos(0),
             m_zPos(0),
             m_Range(2),
             m_NextExpUp(true),
             m_NextExpDown(true),
             m_NextExpLeft(true),
             m_NextExpRight(true)
    {
      ObjLoad("models/Bomb.obj",
              "textures/BombTexture.png",
              m_Vertex,
              m_Normal,
              m_Tex,
              m_v_Index,
              m_t_Index,
              m_n_Index,
              m_Texture);

      m_scale=0.2;

      loadObject();
    }
    ~Bomb(){}

    //------------------------------------------------------------------------------------------------------------
    /// @brief Determines if a bomb should be placed
    //------------------------------------------------------------------------------------------------------------
    bool    m_PlaceBomb;
    //------------------------------------------------------------------------------------------------------------
    /// @brief Determines if a bomb can be placed
    //------------------------------------------------------------------------------------------------------------
    bool    m_CanPlaceBomb;
    //------------------------------------------------------------------------------------------------------------
    /// @brief How long the bomb has been loaded
    //------------------------------------------------------------------------------------------------------------
    int     m_Life;
    //------------------------------------------------------------------------------------------------------------
    /// @brief The x-position of the bomb
    //------------------------------------------------------------------------------------------------------------
    float   m_xPos;
    //------------------------------------------------------------------------------------------------------------
    /// @brief The z-position of the bomb
    //------------------------------------------------------------------------------------------------------------
    float   m_zPos;
    //------------------------------------------------------------------------------------------------------------
    /// @brief The range of the bomb
    //------------------------------------------------------------------------------------------------------------
    int     m_Range;
    //------------------------------------------------------------------------------------------------------------
    /// @brief Whether the next explosion in the negative-z direction should be loaded
    //------------------------------------------------------------------------------------------------------------
    bool    m_NextExpUp;
    //------------------------------------------------------------------------------------------------------------
    /// @brief Whether the next explosion in the positive-z direction should be loaded
    //------------------------------------------------------------------------------------------------------------
    bool    m_NextExpDown;
    //------------------------------------------------------------------------------------------------------------
    /// @brief Whether the next explosion in the negative-x direction should be loaded
    //------------------------------------------------------------------------------------------------------------
    bool    m_NextExpLeft;
    //------------------------------------------------------------------------------------------------------------
    /// @brief Whether the next explosion in the positive-x direction should be loaded
    //------------------------------------------------------------------------------------------------------------
    bool    m_NextExpRight;

//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Storage for some GL functions
//    //------------------------------------------------------------------------------------------------------------
//    GLuint  m_DisplayList;

//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Loads a bomb
//    //------------------------------------------------------------------------------------------------------------
//    void loadBomb();

//protected :
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Stores the vertex coordinates for loading
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<Vec3> m_Vertex;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Stores the normals for loading
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<Vec3> m_Normal;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Stores the texture coordinates for loading
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<Vec3> m_Tex;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Stores the face coordinates for loading
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<Vec3> m_Face;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Face vertices
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<int>  m_v_Index;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Face textures
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<int>  m_t_Index;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Face normals
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<int>  m_n_Index;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief The texture
//    //------------------------------------------------------------------------------------------------------------
//    GLuint            m_Texture;
};

#endif // BOMB_H_
