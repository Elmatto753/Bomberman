/*
 Copyright 2015 Matt Skellon
 1st Year SDAGE PPP Assignment 2
*/

/// \file CrackBlock.h
/// \brief Handles the processes associated with the creation of the breakable "cracked rocks". The destruction of each individual rock is handled in MapLoader.h
/// \author Matthew Skellon
/// \version 1.0
/// \date 4/5/15 Initial Doxygen file creation, updated to NCCA Coding Standard

#ifndef CRACKBLOCK_H_
#define CRACKBLOCK_H_

#include <string>
#include "Scene.h"
#include "Object.h"

class CrackBlock : public Object
{
public :
    CrackBlock()
    {
      ObjLoad("models/Crack_Block.obj",
              "textures/CrackedBlockTexture.png",
              m_Vertex,
              m_Normal,
              m_Tex,
              m_v_Index,
              m_t_Index,
              m_n_Index,
              m_Texture);

      m_scale=0.2;

      loadObject();
    }
    ~CrackBlock(){}

//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Storage for some GL functions
//    //------------------------------------------------------------------------------------------------------------
//    GLuint m_DisplayList;

//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Loads in a cracked block
//    //------------------------------------------------------------------------------------------------------------
//    void loadCBlock();

//protected :
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Stores the vertex coordinates for loading
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<Vec3> m_Vertex;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Stores the normals for loading
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<Vec3> m_Normal;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Stores the texture coordinates for loading
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<Vec3> m_Tex;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Stores the face coordinates for loading
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<Vec3> m_Face;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Face vertices
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<int>  m_v_Index;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Face textures
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<int>  m_t_Index;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief Face normals
//    //------------------------------------------------------------------------------------------------------------
//    std::vector<int>  m_n_Index;
//    //------------------------------------------------------------------------------------------------------------
//    /// @brief The texture
//    //------------------------------------------------------------------------------------------------------------
//    GLuint            m_Texture;


};

#endif
